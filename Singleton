using System;
using System.Collections.Generic;
using System.Text;

namespace Singleton
{
	//public class derivedClass:Singleton
	//public sealed class Singleton
	public class Singleton
	{
		private static int counter = 0;
		//private static readonly object obj = new object();
		private static readonly Lazy<Singleton> instance = new Lazy<Singleton>(()=>new Singleton());//null;
		public static Singleton GetSingleton
		{
			//it does not resolve the singleton problem since 
			//still we create an instance for every call 
			//get { return new Singleton(); }
			get
			{
				/*if (instance == null)
				{
					lock (obj)
					{
						if (instance == null)
						{
							instance = new Singleton();
						}
					}
				}
				*/
				return instance.Value;
			}
		}
		//public Singleton()
		private Singleton()
		{
			counter++;
			Console.WriteLine("Counter value: " + counter.ToString());
		}
		public void printDetails(string message)
		{
			Console.WriteLine(message);
		}
		public class derivedClass:Singleton
		{

		}
    }
}


using System;
using System.Threading.Tasks;
namespace Singleton
{
    class Program
    {
        static void Main(string[] args)
		{
			/*Singleton s1 = new Singleton();
			s1.printDetails("This is the first message");
			s1.printDetails("This is the second message");
			Singleton fromEmployeeClass = new Singleton();
			fromEmployeeClas.printDetails("This is the first message");
			Singleton fromStudentClass = new Singleton();
			fromStudent.printDetails("This is the second message");
			*/
			Parallel.Invoke(() => printEmployee(), () => printStudent());
			//printEmployee();
			//printStudent();

		//	Singleton.derivedClass derivedObj = new Singleton.derivedClass();
		//	derivedObj.printDetails("From derived object");

			Console.ReadLine();
		}

		private static void printStudent()
		{
			Singleton fromStudentClass = Singleton.GetSingleton;
			fromStudentClass.printDetails("From Student");
		}

		private static void printEmployee()
		{
			Singleton fromEmployeeClass = Singleton.GetSingleton;
			fromEmployeeClass.printDetails("From Employee");
		}
	}
}
